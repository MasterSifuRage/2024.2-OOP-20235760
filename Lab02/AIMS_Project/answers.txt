Question 1: When should accessor methods be used?
Accessor methods (getter, setter) nên được sử dụng khi:
Cần kiểm tra hoặc xử lý dữ liệu trước khi trả về. 
Ví dụ:
public void setAge(int age) {
    if (age > 0) {
        this.age = age;
    } else {
        System.out.println("Invalid age!");
    }
}

Khi muốn thay đổi cách xử lý dữ liệu mà không cần sửa mã nguồn bên ngoài.
Khi không vi phạm nguyên tắc đóng gói. Getter không nên chỉ dùng để lấy dữ liệu mà không có xử lý bổ sung.

Question 2: If you create a constructor method to build a DVD by title then create a constructor method to build a DVD by category. Does JAVA allow you to do this?
Có, Java hỗ trợ nạp chồng (overloading) phương thức khởi tạo nếu danh sách tham số khác nhau.
Ví dụ:
public class DVD {
    private String title;
    private String category;
    
    // Constructor 1: Khởi tạo DVD theo tiêu đề
    public DVD(String title) {
        this.title = title;
    }
    
    // Constructor 2: Khởi tạo DVD theo thể loại
    public DVD(String category, boolean isCategory) {
        this.category = category;
    }
}
Ở đây, constructor thứ hai có thêm một tham số boolean isCategory để phân biệt.
Lưu ý: Nếu hai constructor đều có một tham số cùng kiểu (String), Java sẽ không thể phân biệt và báo lỗi biên dịch.

Question 3: Is JAVA a Pass by Value or a Pass by Reference programming language?
Java là Pass by Value, nghĩa là khi truyền tham số vào phương thức, Java tạo một bản sao giá trị và làm việc trên bản sao đó.
Ví dụ:
public static void modifyValue(int x) {
    x = 10;
}
public static void main(String[] args) {
    int a = 5;
    modifyValue(a);
    System.out.println(a); // Kết quả vẫn là 5
}
Lưu ý: Với đối tượng, Java cũng truyền bản sao của tham chiếu, không phải bản sao của đối tượng.

Question 4: After the call of swap(jungleDVD, cinderellaDVD) why does the title of these two objects still remain?
Vì Java truyền tham số theo Pass by Value, nên khi gọi swap(), chỉ hoán đổi bản sao tham chiếu, không ảnh hưởng đến đối tượng gốc.
Ví dụ:

public static void swap(DigitalVideoDisc d1, DigitalVideoDisc d2) {
    DigitalVideoDisc temp = d1;
    d1 = d2;
    d2 = temp;
}
Gọi swap(jungleDVD, cinderellaDVD); không thay đổi giá trị thật của jungleDVD và cinderellaDVD.

Question 5: After the call of changeTitle(jungleDVD, cinderellaDVD.getTitle()) why is the title of the JungleDVD changed?
Vì phương thức changeTitle() thay đổi thuộc tính bên trong đối tượng, không phải tham chiếu của nó. Do đó, giá trị của jungleDVD.title thay đổi.
Ví dụ:
public static void changeTitle(DigitalVideoDisc dvd, String title) {
    dvd.setTitle(title);
}
Gọi changeTitle(jungleDVD, cinderellaDVD.getTitle()); làm thay đổi jungleDVD.title, vì phương thức thao tác trực tiếp trên đối tượng thật.

